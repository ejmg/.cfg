#+TITLE: Emacs configuration file
#+AUTHOR: elias garcia
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* TODO This entire setup
  - [ ] finish figuring out what packages i need, full-stop.
    - [ ] company and auto-complete for every lang
    - [ ] lang packages themselves
    - [ ] utilities such as pdf tools
    - [ ] visual packages like themes and fci
  - [ ] Set up each mode in its subsection with its proper configuration as required by each package!!!
    - [ ] remember to check the githubs of each package more or less
    - [ ] steal plenty from spacemacs configs

* my-init
  configurations for my emacs. these configs are opinionated and probably bad, use at your own 
  hazard.

  heavily inspired by [[https://github.com/larstvei/dot-emacs][Lar's dot-emacs]] and [[https://writequit.org/org/][Lee's as well]].

** overview
*** philosophy
    the main of philosophy of this config is as follows, in order of importance:
    1. readability
       - without readability all is lost in an emacs config. everything will inevitably soon crumble
         after losing the ability to easily understand what is happening in the configuration.
    2. usability
       - it should work, damn it. nothing weird, and err towards simplicity over complexity
    3. encapsulation
       - prevent a monolith configuration file by making *multiple* less monolithic configuration
         files! Woo! Software!

*** how this works
    unlike Lar's configuration, my =init.el= will always be called. i like the idea of =init.el= always
    remaining untouched pure. this also follows all three propositions of my philosophy for this
    config file.

    in =init.el=, i set my package repositories and then bootstrap =use-package= and =org=, these are the
    two undergirdings of this config set up and i want them working correctly and up to date always.

    from there, the init file loads this file (=my-init.org=), extracts all code blocks by "tangling"
    it, and then makes the byte compiled version of its =.el= equivalent.

*** TODO Decide whether I will byte compile my emacs config
    we want our changes in any =.org= config file to be reflected back into our actual =.el= files. The
    hook below achieves this by re-compiling the byte file of any config =.org= file edited.

    #+BEGIN_SRC emacs-lisp :tangle no 
    (defun tangle-init ()
      "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
      (when (equal (buffer-file-name)
                   (expand-file-name (concat user-emacs-directory "init.org")))
        ;; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil))
          (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "init.el")))))

    (add-hook 'after-save-hook 'tangle-init)
    #+END_SRC

**** =use-package=
     always use =use-package= for loading up packages due to its lazy nature. this means emacs doesn't
     load something until it actually needs it, saving us a lot of time and some RAM by cutting boot
     times and pre-loading things when we might never use them.

** TODO the basics
*** defaults 
**** packages
     
     the spice of emacs begins with packages:

     #+BEGIN_SRC emacs-lisp
       (let* ((package--builtins nil)
              (packages
               '(
                 ;; utilities
                 general which-key ivy swiper counsel fill-column-indicator volatile-highlights
                 golden-ratio undo-tree ace-window paredit projectile diminish rainbow-delimiters
                 bookmark+ smartparens ggtags


                 ;; auto-complete
                 company flycheck hippie-exp yasnippet auto-yasnippet flycheck-irony company-c-headers
                 elisp-slime-nav company-math company-auctex company-anaconda company-web-html
                 company-web-jade company-web-slim slime-company company-ycmd flycheck-rust enh-ruby-mode
                 company-ghci company-ghc flycheck-haskell

                 ;; git
                 git-gutter-fringe magit

                 ;; markdown
                 markdown-mode toml-mode yaml-mode

                 ;; c/cpp
                 cc-mode clang-format cmake-mode

                 ;; rust
                 cargo company racer rust-mode

                 ;; lisp
                 slime racket-mode

                 ;; clojure
                 cider cider-eval-sexp-fu clj-refactor clojure-mode clojure-snippets

                 ;; haskell
                 haskell-mode haskell-snippets hindent hlint-refactor 

                 ;; python
                 anaconda-mode pyenv-mode eldoc 

                 ;; js

                 ;; webprogramming
                 css-mode haml-mode sass-mode scss-mode slim-mode web-mode less-css-mode pug-mode emmet-mode

                 ;; ruby
                 bundler chruby rbenv rspec-mode rubocop ruby-tools rvm rake 

                 ;; tex
                 auctex auctex-latexmk typo

                 ;; org 
                 org-bullets org-pomodoro org-download htmlize

                 ;; themes
                 seti-theme gandalf-theme cyberpunk-theme dark-mint-theme

                 ;; other
                 writeroom-mode minimap gnuplot

                 )))
         (let ((packages (remove-if 'package-installed-p packages)))
           (when packages
             ;; Install uninstalled packages
             (package-refresh-contents)
             (mapc 'package-install packages))))
     #+END_SRC

**** general settings

     things that don't seem to go anywhere because of their generality or edge-case nature:

***** system defaults
     
     #+BEGIN_SRC emacs-lisp
       ;; no splash screen, sorry Stallman
       (setq inhibit-splash-screen t)

       ;; don't use the tool bar, thx
       (tool-bar-mode -1)

       ;; do like menu bar
       (menu-bar-mode 1)

       ;; UTF-8 is our friend in a world of shitty programming standards
       (prefer-coding-system 'utf-8)
       (set-default-coding-systems 'utf-8)
       (set-terminal-coding-system 'utf-8)
       (set-keyboard-coding-system 'utf-8)
       (setq default-buffer-file-coding-system 'utf-8)

       ;; speaking of text, unify emacs clipboard with linux
       (setq x-select-enable-clipboard t)

       ;; make sure it attempts utf-8 first when pasting text into emacs
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

       ;; always tell me the column and row of where i am please, i am already lost enough as is.
       (line-number-mode 1)
       (column-number-mode 1)

       ;; do you seriously think i'm good at typing
       (setq read-file-name-completion-ignore-case t)

       ;; life is too short for fully authenticating bad decisions
       (defalias 'yes-or-no-p 'y-or-n-p)

       ;; fix bad escape sequence weirdness
       (setq system-uses-terminfo nil)

       ;; stronk encryption good
       (setq gnutls-min-prime-bits 4096)

       ;; transparent background made possible with this
       (set-background-color nil)

       ;; don't let me be moronic and kill emacs w/o warning. GUI only.
       (when (window-system)
         (setq confirm-kill-emacs 'yes-or-no-p))

       ;; move through lines based on visual appearance rather than literal. Very useful for long, single lines.
       (setq line-move-visual t)


       ;; differentiate buffers with identical names
       (use-package uniquify
         :config
         (setq uniquify-buffer-name-style 'post-forward-angle-brackets))

       ;; use newer files rather than old compiled files, .elc
       (setq load-prefer-newer t)

       ;; if emacs crashes w/o warning, we want a valid list of recent files, don't we?
       (run-at-time nil (* 5 60) 'recentf-save-list)

       ;; finally, set emacs to display the path directory in the menu bar
       ;; displays current working directory at all times in emacs
       (setq frame-title-format
             (list (format "%s %%S: %%j " (system-name))
                   '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
     #+END_SRC

***** navigation and file history

      #+BEGIN_SRC emacs-lisp
        ;; C-c LEFT to undo window change, which i need often
        (use-package winner
          :init (winner-mode 1))

        ;; re-opens file at last place edited
        (use-package saveplace
          :defer t
          :init
          (setq-default save-place t)
          (setq save-place-file (expand-file-name ".places" user-emacs-directory)))

        ;; enables recent-files to be re-opened
        (recentf-mode 1)
        (setq recentf-max-menu-items 50)

        ;; do not need spam in recents list
        (setq recentf-exclude '("/auto-install/" ".recentf" "/repos/" "/elpa/"
                                "\\.mime-example" "\\.ido.last" "COMMIT_EDITMSG"
                                ".gz"
                                "~$" "/tmp/" "/ssh:" "/sudo:" "/scp:"))
      #+END_SRC

***** spelling

      #+BEGIN_SRC emacs-lisp
        ;; make ispell fast and make it only look at 3 char+ words
        (setq ispell-extra-args
              (list "--sug-mode=fast" ;; ultra|fast|normal|bad-spellers
                    "--lang=en_US"
                    "--ignore=3"))
      #+END_SRC

***** 
*** global keybindings

    #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-x\ \C-r" 'recentf-open-files)
    #+END_SRC

*** utilities

**** pdfs

*** org

*** visual

** TODO Languages
*** python
*** cl
*** emacs-lisp
*** clojure
*** latex-mode
*** c/c++
*** webprogramming
*** js
*** haskell
** Can I load other org files from here?
   #+BEGIN_SRC emacs-lisp
   (find-file  "/home/spook/.myemacs.d/my-configs/test.org")

   (org-babel-tangle)
   (load-file  "/home/spook/.myemacs.d/my-configs/test.el")

   ;; byte compilation
   (byte-compile-file "/home/spook/.myemacs.d/my-configs/test.el")
   #+END_SRC
   
