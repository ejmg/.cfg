#+TITLE: Emacs configuration file
#+AUTHOR: elias garcia
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* TODO This entire setup
  - [ ] finish figuring out what packages i need, full-stop.
    - [ ] company and auto-complete for every lang
    - [ ] lang packages themselves
    - [ ] utilities such as pdf tools
    - [ ] visual packages like themes and fci
  - [ ] Set up each mode in its subsection with its proper configuration as required by each package!!!
    - [ ] remember to check the githubs of each package more or less
    - [ ] steal plenty from spacemacs configs

* my-init
  configurations for my emacs. these configs are opinionated and probably bad, use at your own 
  hazard.

  heavily inspired by [[https://github.com/larstvei/dot-emacs][Lar's dot-emacs]].

** overview

*** philosophy
    the main of philosophy of this config is as follows, in order of importance:
    1. readability
       - without readability all is lost in an emacs config. everything will inevitably soon crumble
         after losing the ability to easily understand what is happening in the configuration.
    2. usability
       - it should work, damn it. nothing weird, and err towards simplicity over complexity
    3. encapsulation
       - prevent a monolith configuration file by making *multiple* less monolithic configuration
         files! Woo! Software!

*** how this works
    unlike Lar's configuration, my =init.el= will always be called. i like the idea of =init.el= always
    remaining untouched pure. this also follows all three propositions of my philosophy for this
    config file.

    in =init.el=, i set my package repositories and then bootstrap =use-package= and =org=, these are the
    two undergirdings of this config set up and i want them working correctly and up to date always.

    from there, the init file loads this file (=my-init.org=), extracts all code blocks by "tangling"
    it, and then makes the byte compiled version of its =.el= equivalent.

*** TODO Decide whether I will byte compile my emacs config
    we want our changes in any =.org= config file to be reflected back into our actual =.el= files. The
    hook below achieves this by re-compiling the byte file of any config =.org= file edited.

    #+BEGIN_SRC emacs-lisp :tangle no 
    (defun tangle-init ()
      "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
      (when (equal (buffer-file-name)
                   (expand-file-name (concat user-emacs-directory "init.org")))
        ;; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil))
          (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "init.el")))))

    (add-hook 'after-save-hook 'tangle-init)
    #+END_SRC

**** =use-package=
     always use =use-package= for loading up packages due to its lazy nature. this means emacs doesn't
     load something until it actually needs it, saving us a lot of time and some RAM by cutting boot
     times and pre-loading things when we might never use them.

** TODO the basics
    
*** defaults 
**** packages

     #+BEGIN_SRC emacs-lisp
     (let* ((package--builtins nil)
            (packages
             '(
               ;; utilities
               general which-key ivy swiper counsel fill-column-indicator volatile-highlights
               golden-ratio undo-tree ace-window paredit projectile diminish rainbow-delimiters
               bookmark 


               ;; auto-complete
               company flycheck hippie-exp yasnippet auto-yasnippet flycheck-irony company-c-headers
               eldoc elisp-slime-nav company-math company-auctex company-jedi company-web-html
               company-web-jade company-web-slim slime-company company-ycmd


               


               ;; git
               git-gutter-fringe magit

               ;; markdown
               markdown-mode

               ;; c/cpp
               cc-mode clang-format cmake-mode

               ;; rust
               cargo company racer rust-mode
               
               ;; haskell

               ;; python

               ;; js

               ;; webprogramming
               css-mode haml-mode sass-mode scss-mode slim-mode web-mode less-css-mode pug-mode emmet-mode



               ;; ruby

               )))
       (let ((packages (remove-if 'package-installed-p packages)))
         (when packages
           ;; Install uninstalled packages
           (package-refresh-contents)
           (mapc 'package-install packages))))
     #+END_SRC

**** general settings
     
     #+BEGIN_SRC emacs-lisp
     
     #+END_SRC
*** navigation
    core major/minor modes that i need for my emacs config. these are not particular to languages
    and are more focused on navigation, utility, and look.

    #+BEGIN_SRC emacs-lisp



    #+END_SRC
*** global keybindings

    #+BEGIN_SRC emacs-lisp

    #+END_SRC

*** utilities

**** pdfs

*** org

*** visual

** TODO Languages
*** python
*** cl
*** emacs-lisp
*** clojure
*** latex-mode
*** c/c++
*** webprogramming
*** js
*** haskell
** Can I load other org files from here?
   #+BEGIN_SRC emacs-lisp
   (find-file  "/home/spook/.myemacs.d/my-configs/test.org")

   (org-babel-tangle)
   (load-file  "/home/spook/.myemacs.d/my-configs/test.el")

   ;; byte compilation
   (byte-compile-file "/home/spook/.myemacs.d/my-configs/test.el")
   #+END_SRC
