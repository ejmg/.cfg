#+TITLE: Emacs configuration file
#+AUTHOR: spook
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* TODO
  - [-] finish figuring out what packages i need, full-stop.
    - [X] company and auto-complete for every lang
    - [ ] lang packages themselves
    - [ ] utilities such as pdf tools
    - [X] visual packages like themes and fci
    - [ ] clean up hooks using use-package's very sane implementation, via =:hook=

* my-init
  configurations for my emacs. these configs are opinionated and by no
  guarantee "good." that said, i decided to return to vanilla emacs because it
  ensures i can debug issues and problems when they occur, something i lost in
  the midst of spacemac’s complexity. ergo, the return of my =.emacs= file.

  heavily inspired by [[https://github.com/larstvei/dot-emacs][Lar's]] and [[https://writequit.org/org/][Lee's]] dot-emacs files. I have learned a lot
  about what and what not to do from them.

** overview
*** philosophy
    the main of philosophy of this config is as follows, in order of
    importance:

    1. readability
       - without readability all is lost in an emacs config. everything will
         inevitably soon crumble after losing the ability to easily understand
         what is happening in the configuration.

    2. usability
       - it should work, damn it. nothing weird, and err towards simplicity
         over complexity

    3. modularity
       - avoid global configurations where uncalled for, e.g. less =(global-<MODE>)=

       - configuration functions are good, let’s use more of them!

*** how this works
    unlike Lar's configuration, my =init.el= will always be called. i like the
    idea of =init.el= always remaining untouched and pure.

    in =init.el=, i set my package repositories and then bootstrap
    =use-package= and =org=, these are the two pillars of my config and i
    want to guarantee they are working and up to date.

    from there, the init file loads this file (=my-init.org=), extracts all
    code blocks by "tangling" it, and produces the =.el= equivalent used by
    emacs.

**** use-package notes
***** =:init= vs =:config=

      - =:init= is executed upon the eval of a =(use-package ...)= declaration
        containing them, i.e. immediately when *this* file is evaluated by
        emacs, *always*.
        - not affected by whether the package is lazy loaded or not.

      - =:config= is executed *when* and only *if* the given package in a
        use-package declaration is evaluated. This is because of the lazy
        nature of package configurations.

      - Thus, you will typically want to use =:config= for settings specific
        the mode being loaded, e.g. =(setq some-mode-color ’red)=
      
*** TODO Decide whether I will byte compile my emacs config
    we want our changes in any =.org= config file to be reflected back into our actual =.el= files. The
    hook below achieves this by re-compiling the byte file of any config =.org= file edited.

    #+BEGIN_SRC emacs-lisp :tangle no
    (defun tangle-init ()
      "If the current buffer is 'config.org' the code-blocks are
    tangled, and the tangled file is compiled."
      (when (equal (buffer-file-name)
                   (expand-file-name (concat user-emacs-directory "config.org")))
        ;; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil))
          (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "config.el")))))

    (add-hook 'after-save-hook 'tangle-init)
    #+END_SRC

**** =use-package=
     always use =use-package= for loading up packages due to its lazy nature. this means emacs doesn't
     load something until it actually needs it, saving us a lot of time and some RAM by cutting boot
     times and pre-loading things when we might never use them.

** the basics
*** packages
     
    the spice of emacs begins with packages:

    #+BEGIN_SRC emacs-lisp
      (let* ((package--builtins nil)
             (packages
              '(
                ;; utilities
                which-key ivy swiper counsel fill-column-indicator volatile-highlights
                golden-ratio undo-tree ace-window paredit projectile counsel-projectile diminish rainbow-delimiters
                smartparens ggtags expand-region ag neotree keychain-environment workgroups
                ;;bookmarks+ dired+ no longer on melpa 

                ;; TODO actually config this up so I have a more spacemacs-like navigation experience
                general


                ;; auto-complete
                company flycheck flycheck-tip hippie-exp yasnippet auto-yasnippet flycheck-irony company-c-headers
                elisp-slime-nav company-math company-auctex company-anaconda company-tern
                slime-company company-ycmd flycheck-rust enh-ruby-mode company-web
                company-ghci flycheck-haskell company-statistics yasnippet-snippets

                ;; git
                git-gutter-fringe magit

                ;; markdown
                markdown-mode toml-mode yaml-mode

                ;; c/cpp
                clang-format cmake-mode

                ;; rust
                cargo racer rust-mode

                ;; lisp
                slime racket-mode

                ;; clojure
                cider cider-eval-sexp-fu clj-refactor clojure-mode clojure-snippets clojure-mode-extra-font-locking

                ;; haskell
                haskell-mode haskell-snippets hindent hlint-refactor

                ;; python
                anaconda-mode pyenv-mode hy-mode pytest py-yapf

                ;; TODO: actually set these up
                ;; js
                js-doc js2-mode js2-refactor json-mode json-snatcher web-beautify coffee-mode

                ;; TODO: actually set these up to be used.
                ;; webprogramming
                haml-mode sass-mode scss-mode slim-mode web-mode less-css-mode pug-mode emmet-mode

                ;; TODO: SETUP 
                ;; ruby
                bundler chruby rbenv rspec-mode rubocop ruby-tools rvm rake

                ;; tex
                auctex auctex-latexmk typo cdlatex

                ;; org
                org-bullets org-pomodoro org-download htmlize org-journal

                ;; themes
                challenger-deep-theme exotica-theme seti-theme gandalf-theme cyberpunk-theme dark-mint-theme dracula-theme

                ;; other
                writeroom-mode minimap gnuplot csv-mode mips-mode smart-mode-line fireplace anki-editor emojify

                ;; google
                google-this google-translate

                )))
        (let ((packages (remove-if 'package-installed-p packages)))
          (when packages
            ;; Install uninstalled packages
            (package-refresh-contents)
            (mapc 'package-install packages))))
    #+END_SRC
*** general settings

    things that don't seem to go anywhere because of their generality or edge-case nature:

**** system defaults
     
    #+BEGIN_SRC emacs-lisp
      ;; no splash screen, sorry Stallman
      (setq inhibit-splash-screen t)

      ;; ensure things like gpg and ssh agent are handled automatically
      (keychain-refresh-environment)
      

      ;; don't use the tool or scroll bar, thx
      (tool-bar-mode -1)
      (scroll-bar-mode -1)

      ;; do like menu bar
      (menu-bar-mode 1)

      ;; UTF-8 is our friend in a world of shitty programming standards
      (prefer-coding-system 'utf-8)
      (set-default-coding-systems 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (setq default-buffer-file-coding-system 'utf-8)

      ;; speaking of text, unify emacs clipboard with linux
      (setq x-select-enable-clipboard t)

      ;; global hl line mode
      (global-hl-line-mode t)

      ;; can't get flycheck mode to enable itself otherwise
      (global-flycheck-mode)

      ;; make our mode line prettier
      (use-package smart-mode-line)
      (setq sml/no-confirm-load-theme t)
      (sml/setup)

      ;; make sure it attempts utf-8 first when pasting text into emacs
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

      ;; always tell me the column and row of where i am please, i am already lost
      ;; enough as is.
      (line-number-mode 1)
      (column-number-mode 1)

      ;; do you seriously think i'm good at typing
      (setq read-file-name-completion-ignore-case t)

      ;; life is too short for fully authenticating bad decisions
      (defalias 'yes-or-no-p 'y-or-n-p)

      ;; fix bad escape sequence weirdness
      (setq system-uses-terminfo nil)

      ;; stronk encryption good
      ;;------------------------
      ;; TODO figure out how to make this compatible with erc-tls because
      ;; 4096 encryption makes any connection impossible because freenode uses
      ;; sub-4096 encryption
      ;; (setq gnutls-min-prime-bits 4096)

      ;; don't let me be moronic and kill emacs w/o warning. GUI only.
      (when (window-system)
        (setq confirm-kill-emacs 'yes-or-no-p))

      ;; move through lines based on visual appearance rather than literal. Very
      ;; useful for long, single lines.
      (setq line-move-visual t)

      ;; differentiate buffers with identical names
      (use-package uniquify
        :config
        (setq uniquify-buffer-name-style 'post-forward-angle-brackets))

      ;; use newer files rather than old compiled files, .elc
      (setq load-prefer-newer t)

      ;; if emacs crashes w/o warning, we want a valid list of recent files, don't we?
      (run-at-time nil (* 5 60) 'recentf-save-list)

      ;; finally, set emacs to display the path directory in the menu bar
      ;; displays current working directory at all times in emacs
      (setq frame-title-format
            (list (format "%s %%S: %%j " (system-name))
                  '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
    #+END_SRC

**** which-key and general.el
     Which-key is a very nice minor-mode that essentially gives a preview of
     all possible key completions available based on the current key stroke,
     saving you the hassle of having to memorize *every* key binding, and thus
     protecting you from going full emacs hermit.

     
     general defines "leader" keys/keystrokes, which allows you to setup mappings
     predicated off of a set of leader keys. For example, I set "C-c m" to be
     the leader keystroke for all of my magit commands I typically use.

     key bindings are left to the actual key binding section
     
     #+BEGIN_SRC emacs-lisp
       (use-package general)

       (use-package which-key
         :init
         (which-key-mode)
         :config
         ;; already by default, but explicitly setting for popup to be in a bottom
         ;; frame.
         (which-key-setup-side-window-bottom)
         ;; ensures popup cannot take up more than .15 of emacs window
         (setq which-key-side-window-max-height .10))
     #+END_SRC
**** fill-column, spaces, and tabs
     #+BEGIN_SRC emacs-lisp
       ;; lisp and haskell got me used to working with 2 space indents, idk man
       (setq-default fill-column 79)
       (setq-default indent-tabs-mode nil)
       (setq-default default-tab-width 2)

     #+END_SRC
**** theme, styling, and transparency
     #+BEGIN_SRC emacs-lisp
       ;; Set transparency of emacs
       (defun transparency (value)
         "Sets the transparency of the frame window. 0=transparent/100=opaque"
         (interactive "nTransparency Value 0 - 100 opaque:")
         (set-frame-parameter (selected-frame) 'alpha value))

       ;; for dark: seti; for light: gandalf
       ;; when i feel like a hacker: cyberpunk or dark-mint
       (load-theme 'challenger-deep t)

       ;; pretty symboles
       (prettify-symbols-mode t)
       (setq-default prettify-symbols-alist '(("lambda" . ?λ)
                                              ("delta" . ?Δ)
                                              ("gamma" . ?Γ)
                                              ("phi" . ?φ)
                                              ("psi" . ?ψ)))
     #+END_SRC
**** window and file history

     #+BEGIN_SRC emacs-lisp
       ;; C-c LEFT to undo window change, which i need often
       (use-package winner
         :init (winner-mode 1))

       (use-package workgroups)
       (workgroups-mode 1)
       (setq wg-prefix-key (kbd "C-c w"))
       (setq wg-switch-on-load nil)
       (wg-file "~/.workgroups")



       ;; re-opens file at last place edited
       (use-package saveplace
         :defer t
         :init
         (setq-default save-place t)
         (setq save-place-file (expand-file-name ".places" user-emacs-directory)))

       ;; enables recent-files to be re-opened
       (recentf-mode 1)
       (setq recentf-max-menu-items 50)

       ;; do not need spam in recents list
       (setq recentf-exclude '("/auto-install/" ".recentf" "/repos/" "/elpa/"
                               "\\.mime-example" "\\.ido.last" "COMMIT_EDITMSG"
                               ".gz"
                               "~$" "/tmp/" "/ssh:" "/sudo:" "/scp:"))
       (global-set-key "\C-x\ \C-r" 'recentf-open-files)

       ;;(desktop-save-mode 1)
     #+END_SRC
**** projectile

     #+BEGIN_SRC emacs-lisp
       (use-package projectile
         :init
         (projectile-mode))

       (use-package counsel-projectile
         :hook projectile-mode)

       (defun projectile-pyenv-mode-set ()
         "Set pyenv version matching project name."
         (let ((project (projectile-project-name)))
           (if (member project (pyenv-mode-versions))
               (pyenv-mode-set project)
             (pyenv-mode-unset))))

       (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
     #+END_SRC
**** Ivy, Swiper
     #+BEGIN_SRC emacs-lisp
       (ivy-mode 1)
       (diminish 'ivy-mode)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (global-set-key "\C-s" 'swiper)
       (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (global-set-key (kbd "<f6>") 'ivy-resume)
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
       (global-set-key (kbd "C-c g") 'counsel-git)
       (global-set-key (kbd "C-c j") 'counsel-git-grep)
       (global-set-key (kbd "C-c k") 'counsel-ag)
       (global-set-key (kbd "C-x l") 'counsel-locate)
       (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
     #+END_SRC
**** dired
     #+BEGIN_SRC emacs-lisp
       (defun my/dired-mode-hook ()
         (toggle-truncate-lines 1))

       (use-package dired
         :bind ("C-x C-j" . dired-jump)
         :config
         (progn
           (use-package dired-x
             :init (setq-default dired-omit-files-p t)
             :config
             (add-to-list 'dired-omit-extensions ".DS_Store"))
           (customize-set-variable 'diredp-hide-details-initially-flag nil)
           ;; (use-package dired+) no longer available via melpa
           (use-package dired-aux
             :init (use-package dired-async))
           (put 'dired-find-alternate-file 'disabled nil)
           (setq ls-lisp-dirs-first t
                 dired-recursive-copies 'always
                 dired-recursive-deletes 'always
                 dired-dwim-target t
                 ;; -F marks links with @
                 dired-ls-F-marks-symlinks t
                 delete-by-moving-to-trash t
                 ;; Auto refresh dired
                 global-auto-revert-non-file-buffers t
                 wdired-allow-to-change-permissions t)
           (add-hook 'dired-mode-hook #'my/dired-mode-hook)))
     #+END_SRC
**** spelling

     #+BEGIN_SRC emacs-lisp
       (use-package flyspell
         :init
         (add-hook 'text-mode-hook 'turn-on-flyspell))
         ;; flyspell currently messes with company mode so we will suffer for now.
         ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)

         ;; make ispell fast and make it only look at 3 char+ words
       (setq ispell-extra-args
             (list "--sug-mode=fast" ;; ultra|fast|normal|bad-spellers
                   "--lang=en_US"
                   "--ignore=3"))
     #+END_SRC
**** whitespace
     #+BEGIN_SRC emacs-lisp
       ;; whitespace checker starts at 80
       (setq whitespace-line-column 80)

       ;; what whitespace looks for
       (setq whitespace-style '(tabs newline space-mark
                          tab-mark newline-mark
                          face lines-tail))

       ;; special visual market up for non-whitespace
       (setq whitespace-display-mappings
             ;; all numbers are Unicode codepoint in decimal. e.g. (insert-char 182 1)
             ;; 32 SPACE, 183 MIDDLE DOT
             '((space-mark nil)
               ;; 10 LINE FEED
               ;;(newline-mark 10 [172 10])
               (newline-mark nil)
               ;; 9 TAB, MIDDLE DOT
               (tab-mark 9 [183 9] [92 9])))

       ;; disabled for modes that it doesn't make sense
       (setq whitespace-global-modes '(not org-mode
                                          eshell-mode
                                          shell-mode
                                          web-mode
                                          log4j-mode
                                          "Web"
                                          dired-mode
                                          emacs-lisp-mode
                                          clojure-mode
                                          lisp-mode))
     #+END_SRC
**** backup files

     #+BEGIN_SRC emacs-lisp
       (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
         backup-by-copying t    ; Don't delink hardlinks
         version-control t      ; Use version numbers on backups
         delete-old-versions t  ; Automatically delete excess backups
         kept-new-versions 20   ; how many of the newest versions to keep
         kept-old-versions 5    ; and how many of the old
         )
     #+END_SRC
**** kill/copy line
     #+BEGIN_SRC emacs-lisp
       (defun slick-cut (beg end)
         (interactive
          (if mark-active
              (list (region-beginning) (region-end))
            (list (line-beginning-position) (line-beginning-position 2)))))

       (advice-add 'kill-region :before #'slick-cut)

       (defun slick-copy (beg end)
         (interactive
          (if mark-active
              (list (region-beginning) (region-end))
            (message "Copied line")
            (list (line-beginning-position) (line-beginning-position 2)))))

       (advice-add 'kill-ring-save :before #'slick-copy)
     #+END_SRC
*** completion

    #+BEGIN_SRC emacs-lisp

      (use-package yasnippet)
      (yas-global-mode 1)



      (use-package company
        :defer t
        :diminish ""
        :bind ("C-." . company-complete)
        :init (add-hook 'prog-mode-hook 'company-mode)
        :config
        (progn
          (setq company-idle-delay 0.1
                company-minimum-prefix-length 2
                company-selection-wrap-around t
                company-dabbrev-downcase nil
                company-transformers '(company-sort-by-occurrence))
          (bind-keys :map company-active-map
                     ("C-n" . company-select-next)
                     ("C-p" . company-select-previous)
                     ("C-d" . company-show-doc-buffer)
                     ("<tab>" . company-complete)))
        (add-hook 'company-mode-hook 'company-statistics-mode))

      (use-package company-web)

      ;; haskell
      (eval-after-load "company"
        '(add-to-list 'company-backends 'company-ghci))

      ;; python
      (eval-after-load "company"
        '(add-to-list 'company-backends '(company-anaconda :with company-capf)))

      ;; (eval-after-load "company"
      ;;   '(add-to-list 'company-backends company-web-html))


      ;; Add yasnippet support for all company backends
      ;; https://github.com/syl20bnr/spacemacs/pull/179
      (defvar company-mode/enable-yas t "Enable yasnippet for all backends.")

      (defun company-mode/backend-with-yas (backend)
        (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
            backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
      (eval-after-load "company"
        '(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))

      ;;(eval-after-load "company"
      ;;'(add-to-list 'company-backends 'company-yasnippet))

    #+END_SRC
**** expand region
     #+BEGIN_SRC emacs-lisp
       (use-package expand-region
         :bind ("M-/" . er/expand-region))
     #+END_SRC
**** flycheck
     #+BEGIN_SRC emacs-lisp
       (defun my-flycheck-customize ()
         (interactive)
         (global-set-key (kbd "C-c C-n") 'flycheck-tip-cycle)
         (global-set-key (kbd "C-c C-p") 'flycheck-tip-cycle-reverse))

       (use-package flycheck
         :defer t
         :bind (("M-g M-n" . flycheck-next-error)
                ("M-g M-p" . flycheck-previous-error)
                ("M-g M-=" . flycheck-list-errors))
         :diminish ""
         :config
         (use-package flycheck-tip
           :config (add-hook 'flycheck-mode-hook 'my-flycheck-customize)))
     #+END_SRC
**** undo tree
     #+BEGIN_SRC emacs-lisp

       (use-package undo-tree
         :init (global-undo-tree-mode t)
         :defer t
         :diminish ""
         :config
         (progn
           (define-key undo-tree-map (kbd "C-x u") 'undo-tree-visualize)
           (define-key undo-tree-map (kbd "C-/") 'undo-tree-undo)
           (define-key undo-tree-map (kbd "C-M-/") 'undo-tree-redo)))
     #+END_SRC
*** TODO org

    settings for org mode

    #+BEGIN_SRC emacs-lisp

      (setq org-bullets-bullet-list (quote ("⦿" "▣" "●" "◼" "⁍" "►" "▷" "◆")))
      ;; (setq org-hide-emphasis-markers t)
      (setq org-journal-dir "/home/spook/org/journal/")
      (setq org-journal-enable-encryption t)

      ;; stops org-journal from opening previous day's entry
      (setq org-journal-carryover-items nil)
      ;; find time and motivation to encrypt my journals lmao
      ;; (setq org-journal-enable-encryption t)

      (defun generic-org-minor-modes ()
        (interactive)
        (org-bullets-mode 1)
        (org-cdlatex-mode 1)
        (auto-fill-mode 1))
      (add-hook 'org-mode-hook 'generic-org-minor-modes)

      ;; (setq epa-pinentry-mode 'loopback)
      ;; (pinentry-start)


      ;; enable org to evaluate the following PL code blocks with C-c C-c
      (org-babel-do-load-languages
       'org-babel-load-languages '((C . t)
                                   (python . t)
                                   (shell . t)
                                   (haskell . t)
                                   (emacs-lisp . t)
                                   (clojure . t)
                                   (js . t)))

    #+END_SRC

*** erc

    #+BEGIN_SRC emacs-lisp

       ;; Load authentication info from an external source.  Put sensitive
      ;; passwords and the like in here.

      (use-package erc)

      (load "~/.emacs.d/.erc-auth")

      ;; This causes ERC to connect to the Freenode network upon hitting
      ;; C-c e f.  Replace MYNICK with your IRC nick.

      ;; TODO: FIGURE OUT SASL SUPPORT so I can use VPN + IRC
      (defun login-erc-tls ()
        "Log in to irc using ssl."
        (interactive)
        (erc-tls :server "irc.freenode.net"
                 :port "6697"
                 :nick "[spook]"))

      (global-set-key "\C-cef" #'login-erc-tls)

      (defun login-erc ()
        "login to irc w/o ssl"
        (interactive)
        (erc :server "irc.freenode.net"
             :port "6667"
             :nick "[spook]"))



      ;; Rename server buffers to reflect the current network name instead
      ;; of SERVER:PORT (e.g., "freenode" instead of "irc.freenode.net:6667").
      ;; This is useful when using a bouncer like ZNC where you have multiple
      ;; connections to the same server.
      (setq erc-rename-buffers t)

      ;; Interpret mIRC-style color commands in IRC chats
      (setq erc-interpret-mirc-color t)
    #+END_SRC

** keybindings
   
   Not sure I'm sold on the idea of setting my keybindings with my use-package
   declarations so here's a section holding general keybindings until i decide
   otherwise.

   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-z"))

     (bind-key (kbd "M-/") 'hippie-expand)

     (general-define-key
      :prefix "C-c m"
      "s" 'magit-status
      "p" 'magit-pull-popup
      "c" 'magit-checkout
      "b" 'magit-branch-popup)

     (general-define-key
      :prefix "C-c w"
      "c" 'wg-create-workgroup
      "v" 'wg-switch-to-workgroup
      "w" 'wg-toggle-morph
      "r" 'wg-revert-workgroup
      "u" 'wg-update-workgroup
      "s" 'wg-save
      "l" 'wg-load)

     (general-define-key
      :prefix "C-c e"
      "t" 'login-erc-tls
      "l" 'login-erc)

     (general-define-key
      "C-~" 'ace-swap-window)

     (general-define-key
      "C-z" 'other-window)

     (general-define-key
     "C-S-z" 'ace-window)

     (general-define-key
      :keymaps 'org-mode-map
      :prefix "C-c a"
      "n" 'anki-editor-insert-note
      "d" 'anki-editor-insert-deck
      "s" 'anki-editor-submit)

     (which-key-add-key-based-replacements
       "C-c m" "magit"
       "C-c !" "flycheck"
       "C-c &" "yas"
       "C-c e" "erc"
       "C-c w" "wg")

     (which-key-add-major-mode-key-based-replacements 'org-mode
       "C-c a" "anki")

   #+END_SRC
*** TODO General-mode and leader keybinding setup
** Languages
*** General

    configurations that apply generally to prog-modes and that aren't already
    handled in other categories.

    #+BEGIN_SRC emacs-lisp

      (defun my-add-watchwords ()
        "Highlight FIXME, TODO, and NOCOMMIT in code"
        (font-lock-add-keywords
         nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)\\>"
                1 '((:foreground "#d7a3ad") (:weight bold)) t))))

      (add-hook 'prog-mode-hook 'my-add-watchwords)

      (defun things-all-prog-modes-should-do-dot-jay-peg ()
        "Name specifies function: things all prog modes should have."
        (interactive)
        (fci-mode)
        (linum-mode)
        (smartparens-mode)
        ;;(yas-reload-all)
        ;;(yas-minor-mode-on)
        (show-paren-mode))

      (add-hook 'prog-mode-hook 'things-all-prog-modes-should-do-dot-jay-peg)
    #+END_SRC
*** Haskell

    #+BEGIN_SRC emacs-lisp

      (use-package haskell-mode
        :defer t
        :config
        (defun my-haskell-setup()
          (interactive)
          (haskell-doc-mode)
          (haskell-indent-mode)
          (flycheck-haskell-setup)
          ;;(hindent-mode) ;; must install with stack
          (haskell-snippets-initialize)
          (setq haskell-process-type 'stack-ghci))
        (add-hook 'haskell-mode-hook 'my-haskell-setup))
    #+END_SRC
*** python

    #+BEGIN_SRC emacs-lisp

      ;; bug fix for readline error
      (with-eval-after-load 'python
        (defun python-shell-completion-native-try ()
          "Return non-nil if can trigger native completion."
          (let ((python-shell-completion-native-enable t)
                (python-shell-completion-native-output-timeout
                 python-shell-completion-native-try-output-timeout))
            (python-shell-completion-native-get-completions
             (get-buffer-process (current-buffer))
             nil "_"))))

      (with-eval-after-load 'python
        (add-hook
         'python-mode-hook (lambda ()
                             (setq python-shell-interpreter "python3"))))

      ;; allows triple quote strings to automatically be paired by electrip-pair
      (defun python-electric-pair-string-delimiter ()
        (when (and electric-pair-mode
                   (memq last-command-event '(?\" ?\'))
                   (let ((count 0))
                     (while (eq (char-before (- (point) count)) last-command-event)
                       (setq count (1+ count)))
                     (= count 3)))
          (save-excursion (insert (make-string 3 last-command-event)))))

      (add-hook 'python-mode-hook
                (lambda ()
                  (add-hook 'post-self-insert-hook
                            #'python-electric-pair-string-delimiter 'append t)))


      (use-package python
        :defer t
        :config
        (setq-default py-indent-tabs-mode nil)
        (setq-default flycheck-python-flake8-executable "flake8")
        (setq python-indent 4)
        (setq python-indent-offset 4)
        (setq python-guess-indent nil)
        (defun my-python-setup ()
          (interactive)
          (electric-pair-mode)
          (anaconda-mode)
          (anaconda-eldoc-mode)
          (pyenv-mode)
          (py-yapf-enable-on-save))
          (add-hook 'python-mode-hook 'my-python-setup))


    #+END_SRC
*** common-lisp
    #+BEGIN_SRC emacs-lisp
      (defun activate-slime-helper ()
        (when (file-exists-p "~/.quicklisp/slime-helper.el")
          (load (expand-file-name "~/.quicklisp/slime-helper.el"))
          (define-key slime-repl-mode-map (kbd "C-l")
            'slime-repl-clear-buffer))
        (remove-hook 'lisp-mode-hook #'activate-slime-helper))

      (add-hook 'lisp-mode-hook #'activate-slime-helper)

      (setq inferior-lisp-program "sbcl")

      (setq lisp-loop-forms-indentation   6
            lisp-simple-loop-indentation  2
            lisp-loop-keyword-indentation 6)

      (defun my/helpful-lisp-modes ()
        (interactive)
        (paredit-mode 1)
        (rainbow-delimiters-mode 2)
        (eldoc-mode 1))

      (add-hook 'lisp-mode-hook #'my/helpful-lisp-modes)
    #+END_SRC
*** emacs-lisp
    #+BEGIN_SRC emacs-lisp
      (defun my/turn-on-paredit-and-eldoc ()
        (interactive)
        (paredit-mode 1)
        (eldoc-mode))

      (add-hook 'emacs-lisp-mode-hook #'my/turn-on-paredit-and-eldoc)
      (add-hook 'ielm-mode-hook #'my/turn-on-paredit-and-eldoc)

      (use-package eldoc
        :config
        (progn
          (use-package diminish
            :init
            (progn (diminish 'eldoc-mode "")))
          (setq eldoc-idle-delay 0.3)
          (set-face-attribute 'eldoc-highlight-function-argument nil
                              :underline t :foreground "green"
                              :weight 'bold)))

      (defun ielm-other-window ()
        "Run ielm on other window"
        (interactive)
        (switch-to-buffer-other-window
         (get-buffer-create "*ielm*"))
        (call-interactively 'ielm))

      (define-key emacs-lisp-mode-map (kbd "C-c C-z") 'ielm-other-window)
      (define-key lisp-interaction-mode-map (kbd "C-c C-z") 'ielm-other-window)

      (bind-key "M-:" 'pp-eval-expression)

      (defun sanityinc/eval-last-sexp-or-region (prefix)
        "Eval region from BEG to END if active, otherwise the last sexp."
        (interactive "P")
        (if (and (mark) (use-region-p))
            (eval-region (min (point) (mark)) (max (point) (mark)))
          (pp-eval-last-sexp prefix)))

      (bind-key "C-x C-e" 'sanityinc/eval-last-sexp-or-region emacs-lisp-mode-map)

      (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
    #+END_SRC
*** rust
    #+BEGIN_SRC emacs-lisp
      (use-package rust-mode
        :defer t
        :config
        (defun my-rust-setup ()
          (interactive)
          (racer-mode)
          (cargo-minor-mode)
          (flycheck-rust-setup))
        (add-hook 'rust-mode-hook 'my-rust-setup))
    #+END_SRC
*** TODO webprogramming
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :defer t
        :mode ("\\.html\\'" "\\.css\\'" "\\.sass\\'")
        :config
        (defun my-web-mode-setup ()
          (interactive)
          (company-mode)
          (electric-pair-mode)
          (linum-mode 1)
          ;; (web-mode-enable-current-column-highlight t)
          (emmet-mode))
        (add-hook 'web-mode-hook 'my-web-mode-setup))

      (setq web-mode-engines-alist
            '(("django" . "\\.html\\'")
              ("jinja" . "\\.djhtml\\'")))
    #+END_SRC
*** TODO js
*** TODO clojure
    #+BEGIN_SRC emacs-lisp
      ;; FROM BRAVECLOJURE

      ;;;;
      ;; Clojure
      ;;;;

      ;; Enable paredit for Clojure
      (add-hook 'clojure-mode-hook 'enable-paredit-mode)

      ;; This is useful for working with camel-case tokens, like names of
      ;; Java classes (e.g. JavaClassName)
      (add-hook 'clojure-mode-hook 'subword-mode)

      ;; A little more syntax highlighting
      (require 'clojure-mode-extra-font-locking)

      ;; syntax hilighting for midje
      (add-hook 'clojure-mode-hook
                (lambda ()
                  (setq inferior-lisp-program "lein repl")
                  (font-lock-add-keywords
                   nil
                   '(("(\\(facts?\\)"
                      (1 font-lock-keyword-face))
                     ("(\\(background?\\)"
                      (1 font-lock-keyword-face))))
                  (define-clojure-indent (fact 1))
                  (define-clojure-indent (facts 1))))

      ;;;;
      ;; Cider
      ;;;;

      ;; provides minibuffer documentation for the code you're typing into the repl
      (add-hook 'cider-mode-hook 'eldoc-mode)


      ;; go right to the REPL buffer when it's finished connecting
      (setq cider-repl-pop-to-buffer-on-connect t)

      ;; When there's a cider error, show its buffer and switch to it
      (setq cider-show-error-buffer t)
      (setq cider-auto-select-error-buffer t)

      ;; Where to store the cider history.
      (setq cider-repl-history-file "~/.emacs.d/cider-history")

      ;; Wrap when navigating history.
      (setq cider-repl-wrap-history t)

      ;; enable paredit in your REPL
      (add-hook 'cider-repl-mode-hook 'paredit-mode)

      ;; Use clojure mode for other extensions
      (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
      (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
      (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
      (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))


      ;; key bindings
      ;; these help me out with the way I usually develop web apps
      (defun cider-start-http-server ()
        (interactive)
        (cider-load-current-buffer)
        (let ((ns (cider-current-ns)))
          (cider-repl-set-ns ns)
          (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
          (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))


      (defun cider-refresh ()
        (interactive)
        (cider-interactive-eval (format "(user/reset)")))

      (defun cider-user-ns ()
        (interactive)
        (cider-repl-set-ns "user"))

      (eval-after-load 'cider
        '(progn
           (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
           (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
           (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
           (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))
    #+END_SRC
*** TODO latex-mode
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.tex\\'" . latex-mode))
      (add-to-list 'auto-mode-alist '("\\.tex\\'" . latex-mode))
      (use-package tex
        :ensure auctex)

      (defun generic-tex-minor-modes ()
        (interactive)
        (company-mode 1)
        (auto-fill-mode 1))

      (add-hook 'tex-mode-hook 'generic-tex-minor-modes)

    #+END_SRC
*** TODO c/c++
** bug fixes
   
   it's not good code if it doesn't have bugs in it.

   #+BEGIN_SRC emacs-lisp

     ;; fci mode has this unfortunate compatibility issue with the company-mode
     ;; completion menu, this is a workaround for it by the company-mode maintainer
     (defvar-local company-fci-mode-on-p nil)

     (defun company-turn-off-fci (&rest ignore)
       (when (boundp 'fci-mode)
         (setq company-fci-mode-on-p fci-mode)
         (when fci-mode (fci-mode -1))))

     (defun company-maybe-turn-on-fci (&rest ignore)
       (when company-fci-mode-on-p (fci-mode 1)))

     (add-hook 'company-completion-started-hook 'company-turn-off-fci)
     (add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
     (add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci)
   #+END_SRC
