#+TITLE: Emacs configuration file
#+AUTHOR: spook
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* TODO
  - [-] finish figuring out what packages i need, full-stop.
    - [X] company and auto-complete for every lang
    - [ ] lang packages themselves
    - [ ] utilities such as pdf tools
    - [X] visual packages like themes and fci
    - [ ] clean up hooks using use-package's very sane implementation, via =:hook=

* my-init
  configurations for my emacs. these configs are opinionated and by no
  guarantee "good." that said, i decided to return to vanilla emacs because it
  ensures i can debug issues and problems when they occur, something i lost in
  the midst of spacemac’s complexity. ergo, the return of my =.emacs= file.

  heavily inspired by [[https://github.com/larstvei/dot-emacs][Lar's]] and [[https://writequit.org/org/][Lee's]] dot-emacs files. I have learned a lot
  about what and what not to do from them.

** overview
*** philosophy
    the main of philosophy of this config is as follows, in order of
    importance:

    1. readability
       - without readability all is lost in an emacs config. everything will
         inevitably soon crumble after losing the ability to easily understand
         what is happening in the configuration.

    2. usability
       - it should work, damn it. nothing weird, and err towards simplicity
         over complexity

    3. modularity
       - avoid global configurations where uncalled for, e.g. less =(global-<MODE>)=

       - configuration functions are good, let’s use more of them!

*** how this works
    unlike Lar's configuration, my =init.el= will always be called. i like the
    idea of =init.el= always remaining untouched and pure.

    in =init.el=, i set my package repositories and then bootstrap
    =use-package= and =org=, these are the two pillars of my config and i
    want to guarantee they are working and up to date.

    from there, the init file loads this file (=my-init.org=), extracts all
    code blocks by "tangling" it, and produces the =.el= equivalent used by
    emacs.

**** use-package notes
***** =:init= vs =:config=

      - =:init= is executed upon the eval of a =(use-package ...)= declaration
        containing them, i.e. immediately when *this* file is evaluated by
        emacs, *always*.
        - not affected by whether the package is lazy loaded or not.

      - =:config= is executed *when* and only *if* the given package in a
        use-package declaration is evaluated. This is because of the lazy
        nature of package configurations.

      - Thus, you will typically want to use =:config= for settings specific
        the mode being loaded, e.g. =(setq some-mode-color ’red)=
      
*** TODO Decide whether I will byte compile my emacs config
    we want our changes in any =.org= config file to be reflected back into our actual =.el= files. The
    hook below achieves this by re-compiling the byte file of any config =.org= file edited.

    #+BEGIN_SRC emacs-lisp :tangle no
    (defun tangle-init ()
      "If the current buffer is 'config.org' the code-blocks are
    tangled, and the tangled file is compiled."
      (when (equal (buffer-file-name)
                   (expand-file-name (concat user-emacs-directory "config.org")))
        ;; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil))
          (org-babel-tangle)
          (byte-compile-file (concat user-emacs-directory "config.el")))))

    (add-hook 'after-save-hook 'tangle-init)
    #+END_SRC

**** =use-package=
     always use =use-package= for loading up packages due to its lazy nature. this means emacs doesn't
     load something until it actually needs it, saving us a lot of time and some RAM by cutting boot
     times and pre-loading things when we might never use them.

** the basics
*** packages
     
    the spice of emacs begins with packages:

    #+BEGIN_SRC emacs-lisp
      (let* ((package--builtins nil)
             (packages
              '(
                ;; utilities
                which-key ivy swiper counsel fill-column-indicator volatile-highlights
                golden-ratio undo-tree ace-window paredit projectile counsel-projectile diminish rainbow-delimiters
                smartparens ggtags expand-region ag neotree keychain-environment workgroups multiple-cursors
                dimmer pdf-tools smooth-scrolling exec-path-from-shell
                ;;bookmarks+ dired+ no longer on melpa 

                ;; TODO actually config this up so I have a more spacemacs-like navigation experience
                general


                ;; auto-complete
                company flycheck flycheck-tip hippie-exp yasnippet auto-yasnippet flycheck-irony company-c-headers
                elisp-slime-nav company-math company-auctex company-anaconda company-tern
                slime-company company-ycmd flycheck-rust enh-ruby-mode company-web
                company-ghci flycheck-haskell company-statistics yasnippet-snippets lsp-mode lsp-ui company-lsp lsp-rust

                ;; git
                git-gutter-fringe magit

                ;; markdown
                markdown-mode toml-mode yaml-mode

                ;; c/cpp
                clang-format cmake-mode

                ;; rust
                cargo racer rust-mode

                ;; lisp
                slime racket-mode

                ;; clojure
                cider cider-eval-sexp-fu clj-refactor clojure-mode clojure-snippets clojure-mode-extra-font-locking

                ;; haskell
                haskell-mode haskell-snippets hindent hlint-refactor

                ;; python
                anaconda-mode pyenv-mode hy-mode pytest py-yapf ;; python-pytest

                ;; TODO: actually set these up
                ;; js
                js-doc js2-mode js2-refactor json-mode json-snatcher web-beautify coffee-mode

                ;; TODO: actually set these up to be used.
                ;; webprogramming
                haml-mode sass-mode scss-mode slim-mode web-mode less-css-mode pug-mode emmet-mode

                ;; TODO: SETUP 
                ;; ruby
                bundler chruby rbenv rspec-mode rubocop ruby-tools rvm rake

                ;; tex
                auctex auctex-latexmk typo cdlatex

                ;; org
                org-bullets org-pomodoro org-download htmlize org-journal

                ;; themes
                challenger-deep-theme exotica-theme seti-theme gandalf-theme cyberpunk-theme dark-mint-theme dracula-theme material-theme

                ;; other
                writeroom-mode minimap gnuplot csv-mode mips-mode smart-mode-line fireplace anki-editor emojify

                ;; google
                google-this google-translate

                )))
        (let ((packages (remove-if 'package-installed-p packages)))
          (when packages
            ;; Install uninstalled packages
            (package-refresh-contents)
            (mapc 'package-install packages))))
    #+END_SRC
*** general settings

    things that don't seem to go anywhere because of their generality or edge-case nature:
**** FONTS
     - fira code, etc, do not work with ligatures. i don't know how people get
       it to work. :(
       #+BEGIN_SRC emacs-lisp
         (add-to-list 'default-frame-alist
                       '(font . "Fira Code-12"))
         ;;; Fira code
         ;; This works when using emacs --daemon + emacsclient
         ;; (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))

         ;; TODO: Clearly still broken. Terminal emacs still has buggy ligatures.
         ;; IDEA: Rather than use (when), which only executes on non-nil, change to an if-else
         ;; statement. This (might?) allow me to unset the font if a prior GUI instance changed it to using the Fira ligatures.
         ;; I think this is the next logical step in terms of debugging it.

         ;; my attempt at fixing ligature conflict between terminal fonts & emacs
         (add-hook 'after-make-frame-functions
                   (lambda (frame)
                     (when (display-graphic-p)
                       ;; he sets the font over the range of hex code Xe100 to Xe16f
                       ;; Following the TODO above, maybe the solution is to have an else
                       ;; clause that simply re-sets set-fontset-font to a normal font,
                       ;; maybe `Fira Code-12`?
                       ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Modifying-Fontsets.html
                       (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))))

         ;; This works when using emacs without server/client
         ;; (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")

         ;; my attempt at fixing ligature conflict between terminal fonts & emacs
         ;; In theory, this should catch the exception noted above by the original
         ;; author for these font hooks. This only runs when starting emacs and checks
         ;; for both daemon and non-daemon processes...I think.
         (add-hook 'after-init-hook
                   (lambda ()
                     (when (display-graphic-p)
                       (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))))

         ;; I haven't found one statement that makes both of the above situations work, so I use both for now

         (defconst fira-code-font-lock-keywords-alist
           (mapcar (lambda (regex-char-pair)
                     `(,(car regex-char-pair)
                       (0 (prog1 ()
                            (compose-region (match-beginning 1)
                                            (match-end 1)
                                            ;; The first argument to concat is a string containing a literal tab
                                            ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
                   '(("\\(www\\)"                   #Xe100)
                     ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
                     ("\\(\\*\\*\\*\\)"             #Xe102)
                     ("\\(\\*\\*/\\)"               #Xe103)
                     ("\\(\\*>\\)"                  #Xe104)
                     ("[^*]\\(\\*/\\)"              #Xe105)
                     ("\\(\\\\\\\\\\)"              #Xe106)
                     ("\\(\\\\\\\\\\\\\\)"          #Xe107)
                     ("\\({-\\)"                    #Xe108)
                     ;;("\\(\\[\\]\\)"                #Xe109) ;; p sure this is the annoying square ligature
                     ("\\(::\\)"                    #Xe10a)
                     ("\\(:::\\)"                   #Xe10b)
                     ("[^=]\\(:=\\)"                #Xe10c)
                     ("\\(!!\\)"                    #Xe10d)
                     ("\\(!=\\)"                    #Xe10e)
                     ("\\(!==\\)"                   #Xe10f)
                     ("\\(-}\\)"                    #Xe110)
                     ("\\(--\\)"                    #Xe111)
                     ("\\(---\\)"                   #Xe112)
                     ("\\(-->\\)"                   #Xe113)
                     ("[^-]\\(->\\)"                #Xe114)
                     ("\\(->>\\)"                   #Xe115)
                     ("\\(-<\\)"                    #Xe116)
                     ("\\(-<<\\)"                   #Xe117)
                     ("\\(-~\\)"                    #Xe118)
                     ("\\(#{\\)"                    #Xe119)
                     ("\\(#\\[\\)"                  #Xe11a)
                     ("\\(##\\)"                    #Xe11b)
                     ("\\(###\\)"                   #Xe11c)
                     ("\\(####\\)"                  #Xe11d)
                     ("\\(#(\\)"                    #Xe11e)
                     ("\\(#\\?\\)"                  #Xe11f)
                     ("\\(#_\\)"                    #Xe120)
                     ("\\(#_(\\)"                   #Xe121)
                     ("\\(\\.-\\)"                  #Xe122)
                     ("\\(\\.=\\)"                  #Xe123)
                     ("\\(\\.\\.\\)"                #Xe124)
                     ("\\(\\.\\.<\\)"               #Xe125)
                     ("\\(\\.\\.\\.\\)"             #Xe126)
                     ("\\(\\?=\\)"                  #Xe127)
                     ("\\(\\?\\?\\)"                #Xe128)
                     ("\\(;;\\)"                    #Xe129)
                     ("\\(/\\*\\)"                  #Xe12a)
                     ("\\(/\\*\\*\\)"               #Xe12b)
                     ("\\(/=\\)"                    #Xe12c)
                     ("\\(/==\\)"                   #Xe12d)
                     ("\\(/>\\)"                    #Xe12e)
                     ("\\(//\\)"                    #Xe12f)
                     ("\\(///\\)"                   #Xe130)
                     ("\\(&&\\)"                    #Xe131)
                     ("\\(||\\)"                    #Xe132)
                     ("\\(||=\\)"                   #Xe133)
                     ("[^|]\\(|=\\)"                #Xe134)
                     ("\\(|>\\)"                    #Xe135)
                     ("\\(\\^=\\)"                  #Xe136)
                     ("\\(\\$>\\)"                  #Xe137)
                     ("\\(\\+\\+\\)"                #Xe138)
                     ("\\(\\+\\+\\+\\)"             #Xe139)
                     ("\\(\\+>\\)"                  #Xe13a)
                     ("\\(=:=\\)"                   #Xe13b)
                     ("[^!/]\\(==\\)[^>]"           #Xe13c)
                     ("\\(===\\)"                   #Xe13d)
                     ("\\(==>\\)"                   #Xe13e)
                     ("[^=]\\(=>\\)"                #Xe13f)
                     ("\\(=>>\\)"                   #Xe140)
                     ("\\(<=\\)"                    #Xe141)
                     ("\\(=<<\\)"                   #Xe142)
                     ("\\(=/=\\)"                   #Xe143)
                     ("\\(>-\\)"                    #Xe144)
                     ("\\(>=\\)"                    #Xe145)
                     ("\\(>=>\\)"                   #Xe146)
                     ("[^-=]\\(>>\\)"               #Xe147)
                     ("\\(>>-\\)"                   #Xe148)
                     ("\\(>>=\\)"                   #Xe149)
                     ("\\(>>>\\)"                   #Xe14a)
                     ("\\(<\\*\\)"                  #Xe14b)
                     ("\\(<\\*>\\)"                 #Xe14c)
                     ("\\(<|\\)"                    #Xe14d)
                     ("\\(<|>\\)"                   #Xe14e)
                     ("\\(<\\$\\)"                  #Xe14f)
                     ("\\(<\\$>\\)"                 #Xe150)
                     ("\\(<!--\\)"                  #Xe151)
                     ("\\(<-\\)"                    #Xe152)
                     ("\\(<--\\)"                   #Xe153)
                     ("\\(<->\\)"                   #Xe154)
                     ("\\(<\\+\\)"                  #Xe155)
                     ("\\(<\\+>\\)"                 #Xe156)
                     ("\\(<=\\)"                    #Xe157)
                     ("\\(<==\\)"                   #Xe158)
                     ("\\(<=>\\)"                   #Xe159)
                     ("\\(<=<\\)"                   #Xe15a)
                     ("\\(<>\\)"                    #Xe15b)
                     ("[^-=]\\(<<\\)"               #Xe15c)
                     ("\\(<<-\\)"                   #Xe15d)
                     ("\\(<<=\\)"                   #Xe15e)
                     ("\\(<<<\\)"                   #Xe15f)
                     ("\\(<~\\)"                    #Xe160)
                     ("\\(<~~\\)"                   #Xe161)
                     ("\\(</\\)"                    #Xe162)
                     ("\\(</>\\)"                   #Xe163)
                     ("\\(~@\\)"                    #Xe164)
                     ("\\(~-\\)"                    #Xe165)
                     ("\\(~=\\)"                    #Xe166)
                     ("\\(~>\\)"                    #Xe167)
                     ("[^<]\\(~~\\)"                #Xe168)
                     ("\\(~~>\\)"                   #Xe169)
                     ("\\(%%\\)"                    #Xe16a)
                    ;; ("\\(x\\)"                   #Xe16b) This ended up being hard to do properly so i'm leaving it out.
                     ("[^:=]\\(:\\)[^:=]"           #Xe16c)
                     ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
                     ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

         (defun add-fira-code-symbol-keywords ()
           ;; TODO THIS MIGHT ACTUALLY BE THE ANSWER, IGNORE PREVIOUS TODO's(?):
           ;; https://stackoverflow.com/questions/18152681/syntax-for-adding-removing-font-lock-keywords-in-emacs
           ;; https://www.emacswiki.org/emacs/AddKeywords
           (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))


         (add-hook 'prog-mode-hook
                   #'add-fira-code-symbol-keywords)

         ;; Old TODO before ^^^ occurred to me:
         ;; Maybe set a hook that unsets the #'add-fira-code-symbol-keywords function
         ;; Still could work as a solution but idk in context of above.
         ;; (defun fira-set-if-display-p ()
         ;;   (when (display-graphic-p)
         ;;     #'add-fira-code-symbol-keywords)
         ;;   )

         ;; (add-hook 'prog-mode-hook (lambda ()
         ;;                             (when (display-graphic-p)
         ;;                               ()))
         ;;           )

         ;; figure out why i need to manually call
         ;; M-x interactive-haskell-mode while in a buffer
         ;; that is already in interactive-haskell-mode
         ;; for these fonts to render.
         (add-hook 'interactive-haskell-mode-hook
                   #'add-fira-code-symbol-keywords)
       #+END_SRC
**** system defaults
     
    #+BEGIN_SRC emacs-lisp
      ;; need this for things like pyenv to work with emacs daemon.
      ;; this is a recent development and apparently has something to do with the fact
      ;; i am using the daemon as a systemd unit. that shouldn't be a problem. to checkout later.
      (exec-path-from-shell-initialize)

      ;; no splash screen, sorry Stallman
      (setq inhibit-splash-screen t)

      ;; disables annoying noise, "bell", triggered with actions such as hitting
      ;; the end of a buffer.
      (setq visible-bell t)

      ;; ensure things like gpg and ssh agent are handled automatically
      (keychain-refresh-environment)


      ;; don't use the tool or scroll bar, thx
      (tool-bar-mode -1)
      (scroll-bar-mode -1)

      ;; scrolling speed is bad, make it nicer
      (smooth-scrolling-mode 1)
      (setq mouse-wheel-progressive-speed nil)

      ;; do like menu bar
      (menu-bar-mode 1)

      ;; UTF-8 is our friend in a world of shitty programming standards
      (set-language-environment "UTF-8")
      (prefer-coding-system 'utf-8)
      ;;(set-default-coding-systems 'utf-8)
      ;;(set-terminal-coding-system 'utf-8)
      ;;(set-keyboard-coding-system 'utf-8)
      ;;(setq default-buffer-file-coding-system 'utf-8)

      ;; speaking of text, unify emacs clipboard with linux
      (setq x-select-enable-clipboard t)

      ;; global hl line mode
      (global-hl-line-mode t)

      ;; can't get flycheck mode to enable itself otherwise
      (global-flycheck-mode)

      ;; make our mode line prettier
      (use-package smart-mode-line)
      (setq sml/no-confirm-load-theme t)
      (sml/setup)

      ;; make sure it attempts utf-8 first when pasting text into emacs
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

      ;; always tell me the column and row of where i am please, i am already lost
      ;; enough as is.
      (line-number-mode 1)
      (column-number-mode 1)

      ;; do you seriously think i'm good at typing
      (setq read-file-name-completion-ignore-case t)

      ;; life is too short for fully authenticating bad decisions
      (defalias 'yes-or-no-p 'y-or-n-p)

      ;; fix bad escape sequence weirdness
      (setq system-uses-terminfo nil)

      ;; stronk encryption good
      ;;------------------------
      ;; TODO figure out how to make this compatible with erc-tls because
      ;; 4096 encryption makes any connection impossible because freenode uses
      ;; sub-4096 encryption
      ;; (setq gnutls-min-prime-bits 4096)

      ;; don't let me be moronic and kill emacs w/o warning. GUI only.
      (when (window-system)
        (setq confirm-kill-emacs 'yes-or-no-p))

      ;; move through lines based on visual appearance rather than literal. Very
      ;; useful for long, single lines.
      (setq line-move-visual t)

      ;; differentiate buffers with identical names
      (use-package uniquify
        :config
        (setq uniquify-buffer-name-style 'post-forward-angle-brackets))

      ;; use newer files rather than old compiled files, .elc
      (setq load-prefer-newer t)

      ;; if emacs crashes w/o warning, we want a valid list of recent files, don't we?
      (run-at-time nil (* 5 60) 'recentf-save-list)

      ;; finally, set emacs to display the path directory in the menu bar
      ;; displays current working directory at all times in emacs
      (setq frame-title-format
            (list (format "%s %%S: %%j " (system-name))
                  '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
    #+END_SRC
**** which-key and general.el
     Which-key is a very nice minor-mode that essentially gives a preview of
     all possible key completions available based on the current key stroke,
     saving you the hassle of having to memorize *every* key binding, and thus
     protecting you from going full emacs hermit.

     
     general defines "leader" keys/keystrokes, which allows you to setup mappings
     predicated off of a set of leader keys. For example, I set "C-c m" to be
     the leader keystroke for all of my magit commands I typically use.

     key bindings are left to the actual key binding section
     
     #+BEGIN_SRC emacs-lisp
       (use-package general)

       (use-package which-key
         :init
         (which-key-mode)
         :config
         ;; already by default, but explicitly setting for popup to be in a bottom
         ;; frame.
         (which-key-setup-side-window-bottom)
         ;; ensures popup cannot take up more than .15 of emacs window
         (setq which-key-side-window-max-height .10))
     #+END_SRC
**** fill-column, spaces, and tabs
     #+BEGIN_SRC emacs-lisp
       (setq-default fill-column 79)
       (setq-default indent-tabs-mode nil)
       (setq-default default-tab-width 2)

     #+END_SRC
**** theme, styling, and transparency
     #+BEGIN_SRC emacs-lisp
       ;; Set transparency of emacs
       (defun transparency (value)
         "Sets the transparency of the frame window. 0=transparent/100=opaque"
         (interactive "nTransparency Value 0 - 100 opaque:")
         (set-frame-parameter (selected-frame) 'alpha value))

       ;; i have one them i play with that isn't on melpa
       (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
       ;; for dark: seti; for light: gandalf
       ;; when i feel like a hacker: cyberpunk or dark-mint
       ;; 'challenger-deep
       (load-theme 'tron t)

       ;; pretty symbols
       (prettify-symbols-mode t)
       (setq-default prettify-symbols-alist '(("lambda" . ?λ)
                                              (".\\" . ?λ)
                                              ("->" . ?⟶)
                                              ("=/=" . ?≠)
                                              ("===" . ?≡)
                                              ("!=" . ?≠)
                                              ("<=" . ?≤)
                                              (">=" . ?≥)
                                              ("delta" . ?Δ)
                                              ("gamma" . ?Γ)
                                              ("phi" . ?φ)
                                              ("psi" . ?ψ)
                                              ))
       ;; dims the buffers that are not active
       (use-package dimmer)
       (dimmer-mode)
     #+END_SRC
**** window and file history

     #+BEGIN_SRC emacs-lisp
       ;; C-c LEFT to undo window change, which i need often
       (use-package winner
         :init (winner-mode 1))

       ;; TODO figure out if i want to figure out wg.
       ;; (use-package workgroups)
       ;; (workgroups-mode 1)
       ;; (setq wg-prefix-key (kbd "C-c w"))
       ;; (setq wg-switch-on-load nil)
       ;; (wg-file "~/.workgroups")



       ;; re-opens file at last place edited
       (use-package saveplace
         :defer t
         :init
         (setq-default save-place t)
         (setq save-place-file (expand-file-name ".places" user-emacs-directory)))

       ;; enables recent-files to be re-opened
       (recentf-mode 1)
       (setq recentf-max-menu-items 50)

       ;; do not need spam in recents list
       (setq recentf-exclude '("/auto-install/" ".recentf" "/repos/" "/elpa/"
                               "\\.mime-example" "\\.ido.last" "COMMIT_EDITMSG"
                               ".gz"
                               "~$" "/tmp/" "/ssh:" "/sudo:" "/scp:"))
       (global-set-key "\C-x\ \C-r" 'recentf-open-files)

       ;;(desktop-save-mode 1)
     #+END_SRC
**** projectile

     #+BEGIN_SRC emacs-lisp
       (use-package projectile
         :init
         (projectile-mode))

       (use-package counsel-projectile
         :hook projectile-mode)


       ;; This defun assumes I am always switching python projects and that I
       ;; name my pyenvs after specific projects. It causes a lot of unecessary
       ;; error messages in my buffer for reasons listed above. Tweak or get rid of.


       ;; (defun projectile-pyenv-mode-set ()
       ;;   "Set pyenv version matching project name."
       ;;   (let ((project (projectile-project-name)))
       ;;     (if (member project (pyenv-mode-versions))
       ;;         (pyenv-mode-set project)
       ;;       (pyenv-mode-unset))))

       ;; (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)

     #+END_SRC
**** Ivy, Swiper
     #+BEGIN_SRC emacs-lisp
       (ivy-mode 1)
       (diminish 'ivy-mode)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (global-set-key "\C-s" 'swiper)
       (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (global-set-key (kbd "<f6>") 'ivy-resume)
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
       (global-set-key (kbd "C-c g") 'counsel-git)
       (global-set-key (kbd "C-c j") 'counsel-git-grep)
       (global-set-key (kbd "C-c k") 'counsel-ag)
       (global-set-key (kbd "C-x l") 'counsel-locate)
       (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
     #+END_SRC
**** dired
     #+BEGIN_SRC emacs-lisp
       (defun my/dired-mode-hook ()
         (toggle-truncate-lines 1))

       (use-package dired
         :bind ("C-x C-j" . dired-jump)
         :config
         (progn
           (use-package dired-x
             :init (setq-default dired-omit-files-p t)
             :config
             (add-to-list 'dired-omit-extensions ".DS_Store"))
           (customize-set-variable 'diredp-hide-details-initially-flag nil)
           ;; (use-package dired+) no longer available via melpa
           (use-package dired-aux
             :init (use-package dired-async))
           (put 'dired-find-alternate-file 'disabled nil)
           (setq ls-lisp-dirs-first t
                 dired-recursive-copies 'always
                 dired-recursive-deletes 'always
                 dired-dwim-target t
                 ;; -F marks links with @
                 dired-ls-F-marks-symlinks t
                 delete-by-moving-to-trash t
                 ;; Auto refresh dired
                 global-auto-revert-non-file-buffers t
                 wdired-allow-to-change-permissions t)
           (add-hook 'dired-mode-hook #'my/dired-mode-hook)))
     #+END_SRC
**** spelling

     #+BEGIN_SRC emacs-lisp
       (use-package flyspell
         :init
         (add-hook 'text-mode-hook 'turn-on-flyspell))
         ;; flyspell currently messes with company mode so we will suffer for now.
         ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)

         ;; make ispell fast and make it only look at 3 char+ words
       (setq ispell-extra-args
             (list "--sug-mode=fast" ;; ultra|fast|normal|bad-spellers
                   "--lang=en_US"
                   "--ignore=3"))
     #+END_SRC
**** multiple cursors
     this is a dope package that makes multi-line editing a breeze. to be
     mastered later but for future ref, =mc/edit-lines=,
     =mc/edit-ends-of-lines=, =mc/edit-beginnings-of-lines= are commands i'll
     probably use the most.
     #+BEGIN_SRC emacs-lisp
       (use-package multiple-cursors)
     #+END_SRC
**** whitespace
     #+BEGIN_SRC emacs-lisp
       ;; whitespace checker starts at 80
       (setq whitespace-line-column 80)

       ;; what whitespace looks for
       (setq whitespace-style '(tabs newline space-mark
                          tab-mark newline-mark
                          face lines-tail))

       ;; special visual market up for non-whitespace
       (setq whitespace-display-mappings
             ;; all numbers are Unicode codepoint in decimal. e.g. (insert-char 182 1)
             ;; 32 SPACE, 183 MIDDLE DOT
             '((space-mark nil)
               ;; 10 LINE FEED
               ;;(newline-mark 10 [172 10])
               (newline-mark nil)
               ;; 9 TAB, MIDDLE DOT
               (tab-mark 9 [183 9] [92 9])))

       ;; disabled for modes that it doesn't make sense
       (setq whitespace-global-modes '(not org-mode
                                          eshell-mode
                                          shell-mode
                                          web-mode
                                          log4j-mode
                                          "Web"
                                          dired-mode
                                          emacs-lisp-mode
                                          clojure-mode
                                          lisp-mode))
     #+END_SRC
**** backup files

     #+BEGIN_SRC emacs-lisp
       (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
         backup-by-copying t    ; Don't delink hardlinks
         version-control t      ; Use version numbers on backups
         delete-old-versions t  ; Automatically delete excess backups
         kept-new-versions 20   ; how many of the newest versions to keep
         kept-old-versions 5    ; and how many of the old
         )
     #+END_SRC
**** kill/copy line
     #+BEGIN_SRC emacs-lisp
       (defun slick-cut (beg end)
         (interactive
          (if mark-active
              (list (region-beginning) (region-end))
            (list (line-beginning-position) (line-beginning-position 2)))))

       (advice-add 'kill-region :before #'slick-cut)

       (defun slick-copy (beg end)
         (interactive
          (if mark-active
              (list (region-beginning) (region-end))
            (message "Copied line")
            (list (line-beginning-position) (line-beginning-position 2)))))

       (advice-add 'kill-ring-save :before #'slick-copy)
     #+END_SRC
**** PDF
     - basic settings for how i want my pdf's handled. I use pdf-view
       (pdf-tools), which gives way better resolution, performance, and also
       even annotation logic!
       #+BEGIN_SRC emacs-lisp
          ;; throws error about not being a thing
          ;; (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
          (pdf-loader-install)
       #+END_SRC
*** completion

    #+BEGIN_SRC emacs-lisp

      (use-package lsp-mode)

      (use-package yasnippet)
      (yas-global-mode 1)



      (use-package company
        :defer t
        :diminish ""
        :bind ("C-." . company-complete)
        :init (add-hook 'prog-mode-hook 'company-mode)
        :config
        (progn
          (setq company-idle-delay 0.1
                company-minimum-prefix-length 2
                company-selection-wrap-around t
                company-dabbrev-downcase nil
                company-transformers '(company-sort-by-occurrence))
          (bind-keys :map company-active-map
                     ("C-n" . company-select-next)
                     ("C-p" . company-select-previous)
                     ("C-d" . company-show-doc-buffer)
                     ("<tab>" . company-complete)))
        (add-hook 'company-mode-hook 'company-statistics-mode))

      (use-package company-web)

      ;; haskell
      (eval-after-load "company"
        '(add-to-list 'company-backends 'company-ghci))

      ;; python
      (eval-after-load "company"
        '(add-to-list 'company-backends '(company-anaconda :with company-capf)))

      ;; rust
      (eval-after-load "company"
        '(add-to-list 'company-backends 'company-lsp))

      ;; (eval-after-load "company"
      ;;   '(add-to-list 'company-backends company-web-html))


      ;; Add yasnippet support for all company backends
      ;; https://github.com/syl20bnr/spacemacs/pull/179
      (defvar company-mode/enable-yas t "Enable yasnippet for all backends.")

      (defun company-mode/backend-with-yas (backend)
        (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
            backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
      (eval-after-load "company"
        '(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))

      ;;(eval-after-load "company"
      ;;'(add-to-list 'company-backends 'company-yasnippet))

    #+END_SRC
**** expand region
     #+BEGIN_SRC emacs-lisp
       (use-package expand-region
         :bind ("M-/" . er/expand-region))
     #+END_SRC
**** flycheck
     #+BEGIN_SRC emacs-lisp
       (defun my-flycheck-customize ()
         (interactive)
         (global-set-key (kbd "C-c C-n") 'flycheck-tip-cycle)
         (global-set-key (kbd "C-c C-p") 'flycheck-tip-cycle-reverse))

       (use-package flycheck
         :defer t
         :bind (("M-g M-n" . flycheck-next-error)
                ("M-g M-p" . flycheck-previous-error)
                ("M-g M-=" . flycheck-list-errors))
         :diminish ""
         :config
         (use-package flycheck-tip
           :config (add-hook 'flycheck-mode-hook 'my-flycheck-customize)))
     #+END_SRC
**** undo tree
     #+BEGIN_SRC emacs-lisp

       (use-package undo-tree
         :init (global-undo-tree-mode t)
         :defer t
         :diminish ""
         :config
         (progn
           (define-key undo-tree-map (kbd "C-x u") 'undo-tree-visualize)
           (define-key undo-tree-map (kbd "C-/") 'undo-tree-undo)
           (define-key undo-tree-map (kbd "C-M-/") 'undo-tree-redo)))
     #+END_SRC
*** TODO org

    settings for org mode

    #+BEGIN_SRC emacs-lisp
      ;; other symbols that might be of use idk:
      ;; ● ◼ ⁍ ◙ ◯ □ ◎ ◪ ▆ ▅ █ ⨀ ⨁ ⨂ ✱ ⏣ ⋙ ⃟ 
      ;; ✲ ✺ ✹ ✸ ✽ ✻ ✿ ➤ ➡ ➔ ✪ ✜ ✚ ✙ ▢ ⧐ ▷ ◆
      (setq org-bullets-bullet-list (quote ("⬛" "⬤" "▣" "⦿" "►" "◼" "●" "➤")))
      ;; (setq org-hide-emphasis-markers t)
      (setq org-journal-dir "/home/spook/org/journal/")
      (setq org-journal-enable-encryption t)

      ;; stops org-journal from opening previous day's entry
      (setq org-journal-carryover-items nil)

      ;;(emojify-mode 1)
      (defun generic-org-minor-modes ()
        (interactive)
        (org-bullets-mode 1)
        (org-cdlatex-mode 1)
        (emojify-mode 1)
        (auto-fill-mode 1))
      (add-hook 'org-mode-hook 'generic-org-minor-modes)

      ;; (setq epa-pinentry-mode 'loopback)
      ;; (pinentry-start)


      ;; enable org to evaluate the following PL code blocks with C-c C-c
      (org-babel-do-load-languages
       'org-babel-load-languages '((C . t)
                                   (python . t)
                                   (shell . t)
                                   (haskell . t)
                                   (emacs-lisp . t)
                                   (clojure . t)
                                   (js . t)))

    #+END_SRC

**** Stopping invisible edits
     It is really really hard sometimes to know what, and if, I've edited my
     org files when my carat is hidden. This stops that.

     #+BEGIN_SRC emacs-lisp
       (setq org-catch-invisible-edits 'error)
     #+END_SRC

**** GDT Methodology
     I use org mode to store a lot of random tidbits of information. Too much
     information, actually. TODO's with vacuous deadlines, TODOs that should
     actually be done tomorrow, things I'll realistically never get around to
     in my mortal lifetime, and various bits of information inbetween.

     As a result, I try to follow the Getting Things Done methodology. While I
     don't really believe in silver bullets for organization, the skeleton of
     this system tends to work well for me. I've taken inspiration from [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Petton]]
     and [[http://doc.norang.ca/org-mode.html][Hansen]].

***** Keybindings
      I have =C-c c= for =org-capture=, which allows me to file any random
      thing that comes across my mind or desk.

      #+BEGIN_SRC emacs-lisp
        (global-set-key (kbd "C-c c") 'org-capture)
      #+END_SRC

      I don't need to edit what agenda files I will be using on the fly, so
      disabling =C-c [= and =C-c ]= saves me grief.
      
      #+begin_SRC emacs-lisp
        ;; TODO
        ;; decide how to go about unbinding w/o making my kbd's break like this does.

        ;; Disable keys in org-mode
        ;;    C-c [ 
        ;;    C-c ]
        ;; (add-hook 'org-mode-hook
        ;;           '(lambda ()
        ;;              ;; Undefine C-c [ and C-c ] since this breaks my
        ;;              ;; org-agenda files when directories are include It
        ;;              ;; expands the files in the directories individually
        ;;              (org-defkey org-mode-map "\C-c[" 'undefined)
        ;;              (org-defkey org-mode-map "\C-c]" 'undefined))
        ;;           'append)
      #+END_SRC

      Finally, I need to be able to access my agenda view quickly. This setting
      is currently made with my lenovo x1 carbon in mind. It has a function
      key, "Favorite", that is not recognized by xorg. I remapped it to the
      key =prog2= which is an alias for =XF86Launch2=.

      #+BEGIN_SRC emacs-lisp 
        (global-set-key (kbd "<XF86Launch2>") 'org-agenda)
      #+END_SRC

***** Org Agenda
      Here are the files I will be using to sort and organize my tasks:
      #+BEGIN_SRC emacs-lisp
        (setq org-agenda-files '("~/org/thoughts.org"
                                 "~/org/inbox.org"
                                 "~/org/tasks.org"))
      #+END_SRC

***** Org TODOs
      
      Here are the states that a TODO can have in my org config:

      #+BEGIN_SRC emacs-lisp
        (setq org-todo-keywords
              (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                      (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

      #+END_SRC

      I slightly tweak the default color settings for the faces of these
      states:

      #+BEGIN_SRC emacs-lisp
        (setq org-todo-keyword-faces
              (quote (("TODO" :foreground "red" :weight bold)
                      ("NEXT" :foreground "blue" :weight bold)
                      ("DONE" :foreground "forest green" :weight bold)
                      ("WAITING" :foreground "orange" :weight bold)
                      ("HOLD" :foreground "magenta" :weight bold)
                      ("CANCELLED" :foreground "forest green" :weight bold)
                      ("MEETING" :foreground "red" :weight bold)
                      ("PHONE" :foreground "red" :weight bold))))
      #+END_SRC

      Lets me use fast selection to swap through states of my TODOs:
      
      #+BEGIN_SRC emacs-lisp
        (setq org-use-fast-todo-selection t)
      #+END_SRC

      Disable ability to change these states via =S-left= and =S-right=:
      
      #+BEGIN_SRC emacs-lisp
        (setq org-treat-S-cursor-todo-selection-as-state-change nil)
      #+END_SRC

***** Capture Templates
      
      We'll file every captured moment into my inbox:

      #+BEGIN_SRC emacs-lisp
        (setq org-default-notes-file "~/git/org/inbox.org")
      #+END_SRC

      List of templates to choose from when capturing a moment via =C-c c=:

      #+BEGIN_SRC emacs-lisp
        ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
        (setq org-capture-templates
              (quote (("t" "todo" entry (file "~/org/inbox.org")
                       "* TODO %?\n%U\n%a\n")
                      ("r" "respond" entry (file "~/org/inbox.org")
                       "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n")
                      ("n" "note" entry (file "~/org/inbox.org")
                       "* %? :NOTE:\n%U\n%a\n")
                      ;; ("j" "Journal" entry (file+datetree "~/git/org/diary.org")
                      ;;  "* %?\n%U\n" :clock-in t :clock-resume t)
                      ;; ("w" "org-protocol" entry (file "~/org/inbox.org")
                      ;;  "* TODO Review %c\n%U\n" :immediate-finish t)
                      ("m" "Meeting" entry (file "~/org/inbox.org")
                       "* MEETING with %? :MEETING:\n%U")
                      ("p" "Phone call" entry (file "~/org/inbox.org")
                       "* PHONE %? :PHONE:\n%U")
                      ;; ("h" "Habit" entry (file "~/org/inbox.org")
                      ;;  "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
                      )))
      #+END_SRC
      
      My refile targets for moments. Ideally, I should actively be refiling
      things from my inbox to where they belong. If they are something I will
      be working on, big or small, they go to tasks. If it's just an
      idea/something I won't be touching for sometime, then thoughts. Etc.

      #+BEGIN_SRC emacs-lisp
        ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
        (setq org-refile-targets '(("~/org/thoughts.org" :maxlevel . 9)
                                   ("~/org/tasks.org" :maxlevel . 9)
                                   ("~/org/later.org" :maxlevel . 9)))

        ; Allow refile to create parent tasks with confirmation
        (setq org-refile-allow-creating-parent-nodes (quote confirm))
      #+END_SRC

      We don't want to include DONE tasks as refile targets because that will
      make our lists *huge*.
      
      #+BEGIN_SRC emacs-lisp
        ;;;; Refile settings
        ; Exclude DONE state tasks from refile targets
        (defun bh/verify-refile-target ()
          "Exclude todo keywords with a done state from refile targets"
          (not (member (nth 2 (org-heading-components)) org-done-keywords)))

        (setq org-refile-target-verify-function 'bh/verify-refile-target)
      #+END_SRC
      
***** Agenda

      This is what I see when I run
***** clock
      This changes the modeline time string for a clocked task from total time
      of the time clocked + current session to only the current session.
      #+BEGIN_SRC emacs-lisp
        (setq org-clock-mode-line-total 'current)
      #+END_SRC
*** erc

    #+BEGIN_SRC emacs-lisp

       ;; Load authentication info from an external source.  Put sensitive
      ;; passwords and the like in here.

      (use-package erc)

      (load "~/.emacs.d/.erc-auth")
      (erc-services-mode 1)

      ;; This causes ERC to connect to the Freenode network upon hitting
      ;; C-c e f.  Replace MYNICK with your IRC nick.

      ;; TODO: FIGURE OUT SASL SUPPORT so I can use VPN + IRC
      (defun login-erc-tls ()
        "Log in to irc using ssl."
        (interactive)
        (erc-tls :server "irc.freenode.net"
                 :port "6697"
                 :nick "[spook]"))

      (global-set-key "\C-cef" #'login-erc-tls)

      (defun login-erc ()
        "login to irc w/o ssl"
        (interactive)
        (erc :server "irc.freenode.net"
             :port "6667"
             :nick "[spook]")
        :password spook-password)



      ;; Rename server buffers to reflect the current network name instead
      ;; of SERVER:PORT (e.g., "freenode" instead of "irc.freenode.net:6667").
      ;; This is useful when using a bouncer like ZNC where you have multiple
      ;; connections to the same server.
      (setq erc-rename-buffers t)

      ;; Interpret mIRC-style color commands in IRC chats
      (setq erc-interpret-mirc-color t)
    #+END_SRC

** keybindings
   
   Not sure I'm sold on the idea of setting my keybindings with my use-package
   declarations so here's a section holding general keybindings until i decide
   otherwise.

   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-z"))

     (bind-key (kbd "M-/") 'hippie-expand)

     (general-define-key
      :prefix "C-c m"
      "s" 'magit-status
      "p" 'magit-pull-popup
      "c" 'magit-checkout
      "b" 'magit-branch-popup)

     ;; Don't really use wg's that much.
     ;; wasted keybindings till I find the need.
     ;; (general-define-key
     ;;  :prefix "C-c w"
     ;;  "c" 'wg-create-workgroup
     ;;  "v" 'wg-switch-to-workgroup
     ;;  "w" 'wg-toggle-morph
     ;;  "r" 'wg-revert-workgroup
     ;;  "u" 'wg-update-workgroup
     ;;  "s" 'wg-save
     ;;  "l" 'wg-load)

     (general-define-key
      :prefix "C-c s-m"
      "c" 'mc/edit-lines
      ">" 'mc/mark-next-like-this
      "<" 'mc/mark-previous-like-this
      "e" 'mc/edit-ends-of-lines
      "b" 'mc/edit-beginnings-of-lines
      "a" 'mc/mark-all-like-this
      "r" 'mc/mark-all-in-region)

     (general-define-key
      :prefix "C-c e"
      "t" 'login-erc-tls
      "l" 'login-erc)

     (general-define-key
      "C-~" 'ace-swap-window)

     (general-define-key
      "C-z" 'other-window)

     (general-define-key
     "C-S-z" 'ace-window)

     ;; setting [ as a leader key breaks emacs for some reason.
     ;; Error trace: `(error "Key sequence C-c [ n starts with non-prefix key C-c [")`
     ;;
     ;; Disabled for now given I want to use C-c a for agenda???
     ;; IDK.
     (general-define-key
      :keymaps 'org-mode-map
      :prefix "C-c s-a"
      "n" 'anki-editor-insert-note
      "r" 'anki-editor-retry-failure-notes
      "s" 'anki-editor-push-notes)

     (which-key-add-key-based-replacements
       "C-c m" "magit"
       "C-c !" "flycheck"
       "C-c &" "yas"
       "C-c e" "erc"
       ;; "C-c w" "wg"
       "s-c" "multi")

     ;; not sure if need?
     ;; (which-key-add-major-mode-key-based-replacements 'org-mode
     ;;   "C-c [" "anki")

   #+END_SRC
*** TODO General-mode and leader keybinding setup
** Languages
*** General

    configurations that apply generally to prog-modes and that aren't already
    handled in other categories.

    #+BEGIN_SRC emacs-lisp

      (defun my-add-watchwords ()
        "Highlight FIXME, TODO, and NOCOMMIT in code"
        (font-lock-add-keywords
         nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)\\>"
                1 '((:foreground "#d7a3ad") (:weight bold)) t))))

      (add-hook 'prog-mode-hook 'my-add-watchwords)

      (defun things-all-prog-modes-should-do-dot-jay-peg ()
        "Name specifies function: things all prog modes should have."
        (interactive)
        (fci-mode)
        (linum-mode)
        (emojify-mode)
        (smartparens-mode)
        ;;(yas-reload-all)
        ;;(yas-minor-mode-on)
        (show-paren-mode))

      (add-hook 'prog-mode-hook 'things-all-prog-modes-should-do-dot-jay-peg)
    #+END_SRC
*** Haskell

    #+BEGIN_SRC emacs-lisp

      (use-package haskell-mode
        :defer t
        :config
        (defun my-haskell-setup()
          (interactive)
          (haskell-doc-mode)
          ;; (haskell-indent-mode)
          ;; (haskell-indent-offset 2)
          (flycheck-haskell-setup)
          (electric-indent-mode 0) ;; currently causes a 'cl--assertion-failed: assertion failed (<= start end)'
          ;; (setq haskell-indent-offset 2)
          (interactive-haskell-mode)
          (hindent-mode) ;; must install with stack
          (haskell-snippets-initialize)
          (setq haskell-process-type 'stack-ghci))
        (add-hook 'haskell-mode-hook 'my-haskell-setup))
    #+END_SRC
*** python

    #+BEGIN_SRC emacs-lisp

      ;; bug fix for readline error
      (with-eval-after-load 'python
        (defun python-shell-completion-native-try ()
          "Return non-nil if can trigger native completion."
          (let ((python-shell-completion-native-enable t)
                (python-shell-completion-native-output-timeout
                 python-shell-completion-native-try-output-timeout))
            (python-shell-completion-native-get-completions
             (get-buffer-process (current-buffer))
             nil "_"))))

      (with-eval-after-load 'python
        (add-hook
         'python-mode-hook (lambda ()
                             (setq python-shell-interpreter "python3"))))

      ;; allows triple quote strings to automatically be paired by electrip-pair
      (defun python-electric-pair-string-delimiter ()
        (when (and electric-pair-mode
                   (memq last-command-event '(?\" ?\'))
                   (let ((count 0))
                     (while (eq (char-before (- (point) count)) last-command-event)
                       (setq count (1+ count)))
                     (= count 3)))
          (save-excursion (insert (make-string 3 last-command-event)))))

      (add-hook 'python-mode-hook
                (lambda ()
                  (add-hook 'post-self-insert-hook
                            #'python-electric-pair-string-delimiter 'append t)))


      (use-package python
        :defer t
        :config
        (setq-default py-indent-tabs-mode nil)
        (setq-default flycheck-python-flake8-executable "flake8")
        (setq python-indent-offset 4)
        (setq python-indent-guess-indent-offset nil)
        (setq pytest-cmd-flags "-x -s --color=yes")
        (defun my-python-setup ()
          (interactive)
          (electric-pair-mode)
          (anaconda-mode)
          (anaconda-eldoc-mode)
          (pyenv-mode)
          (py-yapf-enable-on-save))
          (add-hook 'python-mode-hook 'my-python-setup))


    #+END_SRC
*** common-lisp
    #+BEGIN_SRC emacs-lisp
      (defun activate-slime-helper ()
        (when (file-exists-p "~/.quicklisp/slime-helper.el")
          (load (expand-file-name "~/.quicklisp/slime-helper.el"))
          (define-key slime-repl-mode-map (kbd "C-l")
            'slime-repl-clear-buffer))
        (remove-hook 'lisp-mode-hook #'activate-slime-helper))

      (add-hook 'lisp-mode-hook #'activate-slime-helper)

      (setq inferior-lisp-program "sbcl")

      (setq lisp-loop-forms-indentation   6
            lisp-simple-loop-indentation  2
            lisp-loop-keyword-indentation 6)

      (defun my/helpful-lisp-modes ()
        (interactive)
        (paredit-mode 1)
        (rainbow-delimiters-mode 2)
        (eldoc-mode 1))

      (add-hook 'lisp-mode-hook #'my/helpful-lisp-modes)
    #+END_SRC
*** emacs-lisp
    #+BEGIN_SRC emacs-lisp
      (defun my/turn-on-paredit-and-eldoc ()
        (interactive)
        (paredit-mode 1)
        (eldoc-mode))

      (add-hook 'emacs-lisp-mode-hook #'my/turn-on-paredit-and-eldoc)
      (add-hook 'ielm-mode-hook #'my/turn-on-paredit-and-eldoc)

      (use-package eldoc
        :config
        (progn
          (use-package diminish
            :init
            (progn (diminish 'eldoc-mode "")))
          (setq eldoc-idle-delay 0.3)
          (set-face-attribute 'eldoc-highlight-function-argument nil
                              :underline t :foreground "green"
                              :weight 'bold)))

      (defun ielm-other-window ()
        "Run ielm on other window"
        (interactive)
        (switch-to-buffer-other-window
         (get-buffer-create "*ielm*"))
        (call-interactively 'ielm))

      (define-key emacs-lisp-mode-map (kbd "C-c C-z") 'ielm-other-window)
      (define-key lisp-interaction-mode-map (kbd "C-c C-z") 'ielm-other-window)

      (bind-key "M-:" 'pp-eval-expression)

      (defun sanityinc/eval-last-sexp-or-region (prefix)
        "Eval region from BEG to END if active, otherwise the last sexp."
        (interactive "P")
        (if (and (mark) (use-region-p))
            (eval-region (min (point) (mark)) (max (point) (mark)))
          (pp-eval-last-sexp prefix)))

      (bind-key "C-x C-e" 'sanityinc/eval-last-sexp-or-region emacs-lisp-mode-map)

      (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
    #+END_SRC
*** rust
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-rust)
      (use-package lsp-ui)

      (use-package rust-mode
        :defer t
        :config
        (defun my-rust-setup ()
          (interactive)
          ;; (racer-mode)
          (lsp-rust-enable)
          (lsp-ui-mode)
          (cargo-minor-mode)
          (setq cargo-process--command-flags "--color never")
          (set-fill-column 100)
          ;; (flycheck-rust-setup)
          (flycheck-mode)
          )
        (add-hook 'rust-mode-hook 'my-rust-setup))


        (with-eval-after-load 'lsp-mode
          (setq lsp-rust-rls-command '("rustup" "run" "stable" "rls")))
        ;; (add-hook 'lsp-mode-hook 'lsp-ui-mode)
        ;; (add-hook 'rust-mode-hook 'lsp-mode)
    #+END_SRC
*** TODO webprogramming
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :defer t
        :mode ("\\.html\\'" "\\.css\\'" "\\.sass\\'")
        :config
        (defun my-web-mode-setup ()
          (interactive)
          (company-mode)
          (smartparens-mode 0)
          (electric-pair-mode 0)
          (linum-mode 1)
          ;; (web-mode-enable-current-column-highlight t)
          (emmet-mode))
        (add-hook 'web-mode-hook 'my-web-mode-setup))

      (setq web-mode-engines-alist
            '(("django" . "\\.html\\'")
              ("jinja" . "\\.djhtml\\'")))
    #+END_SRC
*** TODO js
*** TODO clojure
    #+BEGIN_SRC emacs-lisp
      ;; FROM BRAVECLOJURE

      ;;;;
      ;; Clojure
      ;;;;

      ;; Enable paredit for Clojure
      (add-hook 'clojure-mode-hook 'enable-paredit-mode)

      ;; This is useful for working with camel-case tokens, like names of
      ;; Java classes (e.g. JavaClassName)
      (add-hook 'clojure-mode-hook 'subword-mode)

      ;; A little more syntax highlighting
      (require 'clojure-mode-extra-font-locking)

      ;; syntax hilighting for midje
      (add-hook 'clojure-mode-hook
                (lambda ()
                  (setq inferior-lisp-program "lein repl")
                  (font-lock-add-keywords
                   nil
                   '(("(\\(facts?\\)"
                      (1 font-lock-keyword-face))
                     ("(\\(background?\\)"
                      (1 font-lock-keyword-face))))
                  (define-clojure-indent (fact 1))
                  (define-clojure-indent (facts 1))))

      ;;;;
      ;; Cider
      ;;;;

      ;; provides minibuffer documentation for the code you're typing into the repl
      (add-hook 'cider-mode-hook 'eldoc-mode)


      ;; go right to the REPL buffer when it's finished connecting
      (setq cider-repl-pop-to-buffer-on-connect t)

      ;; When there's a cider error, show its buffer and switch to it
      (setq cider-show-error-buffer t)
      (setq cider-auto-select-error-buffer t)

      ;; Where to store the cider history.
      (setq cider-repl-history-file "~/.emacs.d/cider-history")

      ;; Wrap when navigating history.
      (setq cider-repl-wrap-history t)

      ;; enable paredit in your REPL
      (add-hook 'cider-repl-mode-hook 'paredit-mode)

      ;; Use clojure mode for other extensions
      (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
      (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
      (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
      (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))


      ;; key bindings
      ;; these help me out with the way I usually develop web apps
      (defun cider-start-http-server ()
        (interactive)
        (cider-load-current-buffer)
        (let ((ns (cider-current-ns)))
          (cider-repl-set-ns ns)
          (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
          (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))


      (defun cider-refresh ()
        (interactive)
        (cider-interactive-eval (format "(user/reset)")))

      (defun cider-user-ns ()
        (interactive)
        (cider-repl-set-ns "user"))

      (eval-after-load 'cider
        '(progn
           (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
           (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
           (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
           (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))
    #+END_SRC
*** TODO latex-mode
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.tex\\'" . latex-mode))
      (add-to-list 'auto-mode-alist '("\\.tex\\'" . latex-mode))
      (use-package tex
        :ensure auctex)

      (defun generic-tex-minor-modes ()
        (interactive)
        (company-mode 1)
        (auto-fill-mode 1))

      (add-hook 'tex-mode-hook 'generic-tex-minor-modes)

    #+END_SRC
*** TODO c/c++
** bug fixes
   
   it's not good code if it doesn't have bugs in it.

   #+BEGIN_SRC emacs-lisp

     ;; fci mode has this unfortunate compatibility issue with the company-mode
     ;; completion menu, this is a workaround for it by the company-mode maintainer
     (defvar-local company-fci-mode-on-p nil)

     (defun company-turn-off-fci (&rest ignore)
       (when (boundp 'fci-mode)
         (setq company-fci-mode-on-p fci-mode)
         (when fci-mode (fci-mode -1))))

     (defun company-maybe-turn-on-fci (&rest ignore)
       (when company-fci-mode-on-p (fci-mode 1)))

     (add-hook 'company-completion-started-hook 'company-turn-off-fci)
     (add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
     (add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci)
   #+END_SRC
